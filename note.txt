#6 - Node.js Stream & Buffer

=>জাভাস্ক্রিপ্ট স্ট্রিং ফর্ম্যাটে শুধুমাত্র ইউনিকোড ডেটা নিয়ে কাজ করতে পারে" এর ব্যাখ্যা:
 
জাভাস্ক্রিপ্টের স্ট্রিংগুলি মূলত ইউনিকোড ফর্ম্যাটে থাকে। ইউনিকোড হল একটি স্ট্যান্ডার্ড ফর্ম্যাট যা বিশ্বজুড়ে বিভিন্ন ভাষা, সিম্বল, এবং বিশেষ ক্যারেক্টারগুলোকে একটি সাধারণ ফর্মে উপস্থাপন করতে সক্ষম। এটি একটি ইউনিভার্সাল ক্যারেক্টার সেট যা প্রতিটি ক্যারেক্টারকে একটি ইউনিক কোড পয়েন্ট (code point) প্রদান করে। জাভাস্ক্রিপ্টের স্ট্রিংগুলো সাধারণত এই ইউনিকোড ক্যারেক্টার ব্যবহার করেই গঠিত।

সমস্যা:
জাভাস্ক্রিপ্ট যখন স্ট্রিং নিয়ে কাজ করে, তখন এটি শুধুমাত্র টেক্সট বা ইউনিকোড ডেটার জন্য অপ্টিমাইজড। কিন্তু অনেক ধরনের ডেটা আছে, যেমন:

i.ইমেজ ফাইল
ii.অডিও/ভিডিও ডেটা
iii.রাউ ডেটা (binary data)

এসব ডেটা বাইনারি ফর্ম্যাটে থাকে, যা ইউনিকোড স্ট্রিং দিয়ে সরাসরি প্রসেস করা সম্ভব নয়। বাইনারি ডেটা মূলত 0 এবং 1 এর মাধ্যমে প্রক্রিয়া করা হয় এবং এই ধরনের ডেটার জন্য জাভাস্ক্রিপ্টের স্ট্রিং সিস্টেম উপযুক্ত নয়।

সমাধান: Buffer
এই সমস্যার সমাধান হিসাবে Node.js এ Buffer ব্যবহার করা হয়। Buffer মূলত একটি মেমরি ব্লক, যা কাঁচা বাইনারি ডেটা ধরে রাখতে পারে। Buffer ব্যবহার করে জাভাস্ক্রিপ্ট বাইনারি ডেটার সাথে কাজ করতে পারে, যা স্ট্রিং-এর মাধ্যমে সম্ভব ছিল না।

উদাহরণ:
ধরো, তুমি যদি একটি ইমেজ ফাইল বা অডিও ফাইল প্রসেস করতে চাও, যা বাইনারি ডেটা আকারে আসে, তখন Buffer এই ডেটা ধরে রাখতে এবং প্রক্রিয়া করতে ব্যবহার করা হয়।


const fs = require('fs');

// ইমেজ ফাইলটি বাইনারি ফর্ম্যাটে Buffer হিসেবে পড়া
const imageBuffer = fs.readFileSync('image.png');
console.log(imageBuffer);

এখানে imageBuffer আসলে বাইনারি ডেটার একটি Buffer। এটি কোন স্ট্রিং নয়, বরং এটি মেমরিতে সংরক্ষিত কাঁচা বাইনারি ডেটা, যা স্ট্রিং এর পরিবর্তে বাইনারি ফর্ম্যাটে প্রসেস করা হয়।

সংক্ষেপে, যেহেতু জাভাস্ক্রিপ্ট স্ট্রিং ফর্ম্যাটে শুধুমাত্র ইউনিকোড ডেটা নিয়ে কাজ করতে পারে, তাই বাইনারি বা কাঁচা ডেটা হ্যান্ডল করতে Buffer এর মতো মেকানিজমের প্রয়োজন হয়। Buffer সেই কাজটি করে, যাতে আমরা বাইনারি ডেটা স্ট্রিমিং, ফাইল প্রসেসিং ইত্যাদি কাজ করতে পারি।



=>Buffer এবং Stream এর ব্যাখ্যা:

Node.js এ Buffer এবং Stream অনেক গুরুত্বপূর্ণ ভূমিকা পালন করে, বিশেষত যখন বড় ডেটা যেমন ফাইল, ভিডিও বা নেটওয়ার্ক থেকে ডেটা পাঠানো বা গ্রহণ করা হয়।

Buffer:
Node.js এ Buffer হল একটি কাঁচা বাইনারি ডেটা হ্যান্ডলিং ক্লাস। যেহেতু জাভাস্ক্রিপ্ট স্ট্রিং ফর্ম্যাটে শুধুমাত্র ইউনিকোড ডেটা নিয়ে কাজ করতে পারে, তাই বাইনারি ডেটা প্রসেস করতে হলে আমাদের Buffer ব্যবহার করতে হয়। Buffer হল একটি নির্দিষ্ট সাইজের মেমরি ব্লক, যেখানে ডেটা ধরে রাখা হয়, যাতে পরবর্তীতে সেগুলো স্ট্রিমের মাধ্যমে প্রসেস করা যায়।


ব্যবহার: যখন ডেটা নেটওয়ার্ক থেকে বা ফাইল সিস্টেম থেকে আসে, তখন পুরো ডেটা একসাথে না পাঠিয়ে ছোট ছোট টুকরোতে ডেটা পাঠানো হয়, যা Buffer-এ জমা হয় এবং পরে প্রয়োজনমতো প্রক্রিয়া করা হয়।
প্রাকৃতিক উদাহরণ: ভিডিও স্ট্রিমিং, যেখানে ভিডিওর ছোট ছোট অংশ Buffer এ জমা হয় এবং পরে প্লেব্যাক হয়।

const buffer = Buffer.from('Hello World');
console.log(buffer); // <Buffer 48 65 6c 6c 6f 20 57 6f 72 6c 64>

Stream:
Stream হলো ডেটা পড়া বা লেখার ধারাবাহিক পদ্ধতি। এটি বিশেষভাবে বড় ডেটা ফাইল বা নেটওয়ার্ক থেকে ডেটা স্থানান্তরের ক্ষেত্রে ব্যবহার করা হয়, যেখানে পুরো ডেটা একবারে লোড করার পরিবর্তে ধারাবাহিকভাবে প্রক্রিয়া করা হয়।

Node.js এ Stream চার প্রকার:

i.Readable Streams: যেখানে ডেটা পড়া হয় (যেমন fs.createReadStream() দিয়ে ফাইল থেকে পড়া)।
ii.Writable Streams: যেখানে ডেটা লেখা হয় (যেমন fs.createWriteStream() দিয়ে ফাইলে লেখা)।
iii.Duplex Streams: যেগুলোতে ডেটা পড়া এবং লেখা উভয়ই করা যায় (যেমন TCP সোকেট)।
iv.Transform Streams: যেখানে ডেটা এক ফর্ম থেকে অন্য ফর্মে রূপান্তরিত করা হয় (যেমন zlib.createGzip() দিয়ে ডেটা compress করা)।

Readable Stream এর উদাহরণ:

const fs = require('fs');

const readableStream = fs.createReadStream('file.txt', { encoding: 'utf8' });

readableStream.on('data', (chunk) => {
  console.log('Received chunk:', chunk);
});

readableStream.on('end', () => {
  console.log('No more data.');
});
এখানে ফাইলটি একবারে পুরো লোড না হয়ে chunk আকারে আসে এবং প্রতিটি chunk data ইভেন্টের মাধ্যমে প্রসেস হয়।

Buffer এবং Stream একত্রে কিভাবে কাজ করে:
Stream ছোট ছোট ডেটা অংশ (chunk) নিয়ে কাজ করে, যা Buffer-এ জমা হয়। Stream এর সুবিধা হল, আমরা পুরো ডেটা একবারে লোড না করে ধারাবাহিকভাবে কাজ করতে পারি, যা মেমরি ব্যবহারের উপর চাপ কমায় এবং কর্মদক্ষতা বৃদ্ধি করে।










 








